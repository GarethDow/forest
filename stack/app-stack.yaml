Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to an instance
    Type: AWS::EC2::KeyPair::KeyName

  ServiceOwner:
    Description: The owner of the service which costs are attributed to
    Type: String

  ServiceCode:
    Description: The code attached to the service which costs are attributed to
    Type: String

  ServiceName:
    Description: The name of the service which costs are attributed to
    Type: String

  ProjectName:
    Description: The name of the project
    Default: forest
    Type: String
    AllowedPattern: "[a-z0-9]+"
    ConstraintDescription: Name must be in lower case or numeric

  ArtifactS3Bucket:
    Description: Bucket used by CodePipeline to store code
    Type: String

  ArtifactS3Key:
    Description: Object key used by CodePipeline to store code
    Type: String

  UniqueEnvName:
    Type: String
    Default: prototype
    Description: Unique environment name


Resources:
  HelloBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: met-office-rmed-collab-stack
      Tags:
        - Key: ServiceOwner
          Value: !Ref ServiceOwner
        - Key: ServiceCode
          Value: !Ref ServiceCode
        - Key: ServiceName
          Value: !Ref ServiceName

  HelloWorldLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub "${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda:*"

  HelloWorldLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda"
      Handler: stack/src/hello_world.handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt HelloWorldLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub "${ArtifactS3Bucket}"
        S3Key: !Sub "${ArtifactS3Key}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${UniqueEnvName}-${AWS::Region}-lambda"
        - Key: ServiceOwner
          Value: !Ref ServiceOwner
        - Key: ServiceCode
          Value: !Ref ServiceCode
        - Key: ServiceName
          Value: !Ref ServiceName
